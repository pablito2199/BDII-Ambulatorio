package gui;

import aplicacion.clases.Paciente;
import aplicacion.clases.GrupoSanguineo;
import java.sql.Date;

public class VPacientes extends javax.swing.JDialog {

    private final VPrincipal padre;                           //Enlace a la ventana padre
    private final aplicacion.FachadaAplicacion fa;      //Enlace a la fachada de aplicaci√≥n

    /**
     * Creates new form VPaciente
     *
     * @param parent
     * @param modal
     * @param fa
     */
    //Constructor de la ventana
    public VPacientes(java.awt.Frame parent, boolean modal, aplicacion.FachadaAplicacion fa) {
        super(parent, modal);
        this.fa = fa;
        initComponents();
        padre = (VPrincipal) parent;
        padre.setVisible(false);
        //Hacemos invisible el aviso de que hay campos obligatorios sin cubrir
        btnBorrar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        btnLimpiar = new javax.swing.JButton();
        btnActualizarPaciente = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPacientes = new javax.swing.JTable();
        btnNuevaUrgencia = new javax.swing.JButton();
        btnEnfermedades = new javax.swing.JButton();
        btnSolicitarCita = new javax.swing.JButton();
        btnCitasPendientes = new javax.swing.JButton();
        btnHistorialClinico = new javax.swing.JButton();
        btnHistorialRecetas = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        labelCIP = new javax.swing.JLabel();
        varNombre = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        labelSexo = new javax.swing.JLabel();
        labelDireccion = new javax.swing.JLabel();
        varDireccion = new javax.swing.JTextField();
        varDNI = new javax.swing.JTextField();
        varNSS = new javax.swing.JTextField();
        labelNSS = new javax.swing.JLabel();
        labelDNI = new javax.swing.JLabel();
        varSexo = new javax.swing.JTextField();
        varGrupoSanguineo = new javax.swing.JTextField();
        labelGrupoSanguineo = new javax.swing.JLabel();
        labelEdad = new javax.swing.JLabel();
        varEdad = new javax.swing.JTextField();
        varCIP = new javax.swing.JTextField();
        labelNacionalidad = new javax.swing.JLabel();
        varNacionalidad = new javax.swing.JTextField();
        labelFechaNacimiento = new javax.swing.JLabel();
        varFechaNacimiento = new javax.swing.JTextField();
        labelTelefono = new javax.swing.JLabel();
        varTelefono = new javax.swing.JTextField();
        btnBuscarUsuario = new javax.swing.JButton();
        labelGestionarPacientes = new javax.swing.JLabel();

        setResizable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnActualizarPaciente.setText("Actualizar");
        btnActualizarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPacienteActionPerformed(evt);
            }
        });

        btnBorrar.setText("Eliminar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnSalir.setText("Regresar");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnActualizarPaciente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBorrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tablaPacientes.setModel(new ModeloTablaPacientes());
        tablaPacientes.setAutoscrolls(false);
        tablaPacientes.getTableHeader().setReorderingAllowed(false);
        tablaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaPacientes);

        btnNuevaUrgencia.setText("Nueva Urgencia");
        btnNuevaUrgencia.setToolTipText("");
        btnNuevaUrgencia.setEnabled(false);
        btnNuevaUrgencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaUrgenciaActionPerformed(evt);
            }
        });

        btnEnfermedades.setText("Enfermedades");
        btnEnfermedades.setEnabled(false);
        btnEnfermedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnfermedadesActionPerformed(evt);
            }
        });

        btnSolicitarCita.setText("Solicitar Cita");
        btnSolicitarCita.setEnabled(false);
        btnSolicitarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolicitarCitaActionPerformed(evt);
            }
        });

        btnCitasPendientes.setText("Citas Pendientes");
        btnCitasPendientes.setEnabled(false);
        btnCitasPendientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitasPendientesActionPerformed(evt);
            }
        });

        btnHistorialClinico.setText("Historial Clinico");
        btnHistorialClinico.setEnabled(false);
        btnHistorialClinico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialClinicoActionPerformed(evt);
            }
        });

        btnHistorialRecetas.setText("Historial Recetas");
        btnHistorialRecetas.setEnabled(false);
        btnHistorialRecetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialRecetasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnEnfermedades)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNuevaUrgencia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSolicitarCita)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCitasPendientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHistorialClinico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHistorialRecetas))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2)))
                .addGap(25, 25, 25))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevaUrgencia, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnfermedades, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSolicitarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCitasPendientes, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHistorialClinico, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHistorialRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelCIP.setText("CIP:");

        varNombre.setToolTipText("Nombre de usuario");

        labelNombre.setText("Nombre:");

        labelSexo.setText("Sexo:");

        labelDireccion.setText("Direccion:");

        varDireccion.setToolTipText("Domicilio");

        varDNI.setToolTipText("Correo electr√≥nico");

        varNSS.setToolTipText("Nombre del usuario");

        labelNSS.setText("NSS:");

        labelDNI.setText("DNI:");

        varSexo.setToolTipText("Edad del usuario");

        varGrupoSanguineo.setToolTipText("Edad del usuario");

        labelGrupoSanguineo.setText("GS:");

        labelEdad.setText("Edad:");

        varEdad.setToolTipText("Edad del usuario");

        varCIP.setToolTipText("Nombre de usuario");

        labelNacionalidad.setText("Nacionalidad:");

        varNacionalidad.setToolTipText("Nombre de usuario");

        labelFechaNacimiento.setText("Fecha Nacimiento:");

        varFechaNacimiento.setToolTipText("Nombre del usuario");

        labelTelefono.setText("Telefono:");

        varTelefono.setToolTipText("Nombre de usuario");

        btnBuscarUsuario.setText("Buscar");
        btnBuscarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelNacionalidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(varFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelCIP)
                            .addComponent(labelNombre)
                            .addComponent(labelDireccion)
                            .addComponent(labelDNI)
                            .addComponent(labelTelefono))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(varTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBuscarUsuario))
                            .addComponent(varDireccion, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(varNombre)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(varCIP, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(varNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(varDNI, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(labelNSS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(varNSS, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelFechaNacimiento)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(labelSexo)
                                                .addGap(15, 15, 15)
                                                .addComponent(varSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(labelEdad)
                                                .addGap(18, 18, 18)
                                                .addComponent(varEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(labelGrupoSanguineo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(varGrupoSanguineo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))))))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCIP)
                    .addComponent(varCIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNSS)
                    .addComponent(varNSS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelNombre)
                    .addComponent(varNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSexo)
                    .addComponent(varSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelGrupoSanguineo)
                    .addComponent(varGrupoSanguineo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEdad)
                    .addComponent(varEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNacionalidad)
                    .addComponent(varNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFechaNacimiento)
                    .addComponent(varFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDireccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTelefono)
                    .addComponent(varTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarUsuario))
                .addGap(15, 15, 15))
        );

        labelGestionarPacientes.setForeground(new java.awt.Color(0, 0, 255));
        labelGestionarPacientes.setText("GESTIONAR PACIENTES");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelGestionarPacientes)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(labelGestionarPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Funci√≥n que permite salir de la ventana de usuario
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        padre.setVisible(true);
        //Buscamos ambulatorios
        padre.buscarAmbulatorios();
        //Y destruimos esta ventana
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    //Funci√≥n que permite borrar un usuario
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        Paciente paciente = new Paciente(varCIP.getText());
        //Llamamos al borrado de pacientes
        fa.borrarPaciente(paciente);
        //Ponemos todos los campos a NULL
        varCIP.setText(null);
        varNSS.setText(null);
        varNombre.setText(null);
        varDNI.setText(null);
        varSexo.setText(null);
        varEdad.setText(null);
        varGrupoSanguineo.setText(null);
        varNacionalidad.setText(null);
        varFechaNacimiento.setText(null);
        varDireccion.setText(null);
        varTelefono.setText(null);
        //Actualizamos la tabla
        buscarPacientes();
    }//GEN-LAST:event_btnBorrarActionPerformed

    //Funci√≥n que permite limpiar los campos y la tabla para prepara la inserci√≥n de un nuevo usuario
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        //Creamos el modelo de tabla pr√©stamos
        ModeloTablaPacientes m;
        m = (ModeloTablaPacientes) tablaPacientes.getModel();
        //Metemos un array vac√≠o como las filas
        m.setFilas(new java.util.ArrayList<>());
        //Setteamos todo a null
        varCIP.setText(null);
        varNSS.setText(null);
        varNombre.setText(null);
        varDNI.setText(null);
        varSexo.setText(null);
        varEdad.setText(null);
        varGrupoSanguineo.setText(null);
        varNacionalidad.setText(null);
        varFechaNacimiento.setText(null);
        varDireccion.setText(null);
        varTelefono.setText(null);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    //Funci√≥n que permite guardar el usuario en la base de datos
    private void btnActualizarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPacienteActionPerformed
        //Comprobarmos que no haya ning√∫n campo obligatorio sin cubrir
        if (varCIP.getText().isEmpty() || varDNI.getText().isEmpty() || varNSS.getText().isEmpty() || varNombre.getText().isEmpty()
                || varSexo.getText().isEmpty() || varGrupoSanguineo.getText().isEmpty() || varNacionalidad.getText().isEmpty()
                || varFechaNacimiento.getText().isEmpty() || varDireccion.getText().isEmpty() || varTelefono.getText().isEmpty()) {
            //Si lo hay activamos el aviso
            fa.muestraExcepcion("Necesitas rellenar todos los campos antes de poder actualizar");
            //Regresamos
            return;
        }
        if (GrupoSanguineo.getTipo(varGrupoSanguineo.getText()) == null) {
            fa.muestraExcepcion("El valor introducido para el grupo sangu√≠neo no es v√°lido");
            return;
        }
        if (fa.existePaciente(varCIP.getText())) {
            //Instanciamos el usuario con los datos proporcionados
            Paciente u = new Paciente(varCIP.getText(), varDNI.getText(), Integer.parseInt(varNSS.getText()), varNombre.getText(),
                    Date.valueOf(varFechaNacimiento.getText()), varSexo.getText(), GrupoSanguineo.getTipo(varGrupoSanguineo.getText()),
                    varNacionalidad.getText(), varDireccion.getText(), varTelefono.getText());
            //Actualizamos la base de datos
            fa.modificarPaciente(u);
            //De no existir se crea uno nuevo
        } else {
            //LA EDAD NO SE TIENE EN CUENTA PUESTO QUE ES UN CALCULADO
            //Instanciamos el usuario
            Paciente p = new Paciente(varCIP.getText(), varDNI.getText(), Integer.parseInt(varNSS.getText()), varNombre.getText(),
                    Date.valueOf(varFechaNacimiento.getText()), varSexo.getText(), GrupoSanguineo.getTipo(varGrupoSanguineo.getText()),
                    varNacionalidad.getText(), varDireccion.getText(), varTelefono.getText());
            //Lo insertamos en la base de datos
            fa.insertarPaciente(p);
        }
        //Finalmente buscamos otra vez pacientes
        rebuscarPacientes();
    }//GEN-LAST:event_btnActualizarPacienteActionPerformed

    //Funci√≥n que permite buscar el/los usuario(s) una vez hecho click en el bot√≥n buscar
    private void btnBuscarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarUsuarioActionPerformed
        //Buscamos
        buscarPacientes();
    }//GEN-LAST:event_btnBuscarUsuarioActionPerformed

    //Funci√≥n que permite resolver un click en la tabla de pacientes
    private void tablaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPacientesMouseClicked
        //Creamos el modelo de tabla pr√©stamos
        ModeloTablaPacientes m;
        m = (ModeloTablaPacientes) tablaPacientes.getModel();
        //Obtenemos todos los datos del usuario (fila) en el que se hizo click y los metemos en los campos
        varCIP.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getCIP());
        varNSS.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNSS().toString());
        varNombre.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNombre());
        varDNI.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getDNI());
        varSexo.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getSexo());
        varEdad.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getEdad().toString());
        varGrupoSanguineo.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getGrupo().getTipo());
        varNacionalidad.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNacionalidad());
        varFechaNacimiento.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getFechaNacimiento().toString());
        varDireccion.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getDireccion());
        varTelefono.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getTelefono());
        //Activamos los botones
        btnEnfermedades.setEnabled(true);
        btnNuevaUrgencia.setEnabled(true);
        btnSolicitarCita.setEnabled(true);
        btnCitasPendientes.setEnabled(true);
        btnHistorialClinico.setEnabled(true);
        btnHistorialRecetas.setEnabled(true);
    }//GEN-LAST:event_tablaPacientesMouseClicked

    private void btnNuevaUrgenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaUrgenciaActionPerformed
        rebuscarPacientes();
    }//GEN-LAST:event_btnNuevaUrgenciaActionPerformed

    private void btnEnfermedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnfermedadesActionPerformed
        ModeloTablaPacientes m = (ModeloTablaPacientes) tablaPacientes.getModel();
        fa.nuevaVGestionEnfermedades(this, m.obtenerPaciente(tablaPacientes.getSelectedRow()).getCIP());        
        rebuscarPacientes();
    }//GEN-LAST:event_btnEnfermedadesActionPerformed

    private void btnSolicitarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolicitarCitaActionPerformed
        rebuscarPacientes();
    }//GEN-LAST:event_btnSolicitarCitaActionPerformed

    private void btnCitasPendientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitasPendientesActionPerformed
        rebuscarPacientes();
    }//GEN-LAST:event_btnCitasPendientesActionPerformed

    private void btnHistorialClinicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialClinicoActionPerformed
        ModeloTablaPacientes m = (ModeloTablaPacientes) tablaPacientes.getModel();
        Paciente p = new Paciente(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getCIP());
        fa.nuevaVHistorialMedico(this, p);
        rebuscarPacientes();
    }//GEN-LAST:event_btnHistorialClinicoActionPerformed

    private void btnHistorialRecetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialRecetasActionPerformed
        ModeloTablaPacientes m = (ModeloTablaPacientes) tablaPacientes.getModel();
        Paciente p = new Paciente(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getCIP());
        fa.nuevaVHistorialRecetas(this, p);
        rebuscarPacientes();
    }//GEN-LAST:event_btnHistorialRecetasActionPerformed

    //Funci√≥n que permite buscar un usuario en la base de datos
    public void buscarPacientes() {
        //Creamos el modelo de tabla pr√©stamos
        ModeloTablaPacientes m;
        m = (ModeloTablaPacientes) tablaPacientes.getModel();

        Integer NSS = 0, edad = 0;
        //Setteamos las filas con el resultado de la b√∫squeda
        if (!varNSS.getText().isEmpty()) {
            //Intentamos convertir el NSS a entero
            try {
                NSS = Integer.parseInt(varNSS.getText());
                //Si al hacerlo es negativo imprimimos el error
                if (NSS < 0) {
                    fa.muestraExcepcion("El NSS (N√∫mero de la Seguridad Social) debe ser un n√∫mero positivo.");
                    return;
                }
                //De no poder convertir a entero se imprime la excepci√≥n
            } catch (NumberFormatException ex) {
                fa.muestraExcepcion("El valor introducido para el NSS (N√∫mero de la Seguridad Social) no es v√°lido.");
                return;
            }
        } else {
            NSS = null;
        }
        if (!varEdad.getText().isEmpty()) {
            //Intentamos convertirla a entero
            try {
                edad = Integer.parseInt(varEdad.getText());
                //Si al hacerlo la edad es negativa imprimimos el error
                if (edad < 0) {
                    fa.muestraExcepcion("La edad debe ser un n√∫mero positivo.");
                    return;
                }
                //De no poder convertir a entero se imprime la excepci√≥n
            } catch (NumberFormatException ex) {
                fa.muestraExcepcion("El valor introducido para la edad no es v√°lido.");
                return;
            }
        } else {
            edad = null;
        }
        m.setFilas(fa.consultarPacientes(varCIP.getText(), varDNI.getText(), varNombre.getText(),
                edad, varSexo.getText(), NSS, varGrupoSanguineo.getText()));
        //Si hay coincidencias
        if (m.getRowCount() > 0) {
            //Seleccionamos la primera
            tablaPacientes.setRowSelectionInterval(0, 0);
            //Habilitamos el borrado
            btnBorrar.setEnabled(true);
            //Obtenemos todos los datos del usuario (fila) en el que se hizo click y los metemos en los campos
            varCIP.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getCIP());
            varNSS.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNSS().toString());
            varNombre.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNombre());
            varDNI.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getDNI());
            varSexo.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getSexo());
            varEdad.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getEdad().toString());
            varGrupoSanguineo.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getGrupo().getTipo());
            varNacionalidad.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNacionalidad());
            varFechaNacimiento.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getFechaNacimiento().toString());
            varDireccion.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getDireccion());
            varTelefono.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getTelefono());
            //Activamos los botones
            btnEnfermedades.setEnabled(true);
            btnNuevaUrgencia.setEnabled(true);
            btnSolicitarCita.setEnabled(true);
            btnCitasPendientes.setEnabled(true);
            btnHistorialClinico.setEnabled(true);
            btnHistorialRecetas.setEnabled(true);
        } else {
            //De no haberlas, deshabilitamos el borrado
            btnBorrar.setEnabled(false);
        }
    }

    //Funci√≥n que permite buscar un usuario en la base de datos
    public void rebuscarPacientes() {
        //Creamos el modelo de tabla pr√©stamos
        ModeloTablaPacientes m;
        m = (ModeloTablaPacientes) tablaPacientes.getModel();

       m.setFilas(fa.consultarPacientes("", "", "", null, "", null, ""));
        //Si hay coincidencias
        if (m.getRowCount() > 0) {
            //Seleccionamos la primera
            tablaPacientes.setRowSelectionInterval(0, 0);
            //Habilitamos el borrado
            btnBorrar.setEnabled(true);
            //Obtenemos todos los datos del usuario (fila) en el que se hizo click y los metemos en los campos
            varCIP.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getCIP());
            varNSS.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNSS().toString());
            varNombre.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNombre());
            varDNI.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getDNI());
            varSexo.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getSexo());
            varEdad.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getEdad().toString());
            varGrupoSanguineo.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getGrupo().getTipo());
            varNacionalidad.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getNacionalidad());
            varFechaNacimiento.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getFechaNacimiento().toString());
            varDireccion.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getDireccion());
            varTelefono.setText(m.obtenerPaciente(tablaPacientes.getSelectedRow()).getTelefono());
            //Activamos los botones
            btnEnfermedades.setEnabled(true);
            btnNuevaUrgencia.setEnabled(true);
            btnSolicitarCita.setEnabled(true);
            btnCitasPendientes.setEnabled(true);
            btnHistorialClinico.setEnabled(true);
            btnHistorialRecetas.setEnabled(true);
        } else {
            //De no haberlas, deshabilitamos el borrado
            btnBorrar.setEnabled(false);
        }
    }

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarPaciente;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscarUsuario;
    private javax.swing.JButton btnCitasPendientes;
    private javax.swing.JButton btnEnfermedades;
    private javax.swing.JButton btnHistorialClinico;
    private javax.swing.JButton btnHistorialRecetas;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevaUrgencia;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnSolicitarCita;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelCIP;
    private javax.swing.JLabel labelDNI;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelEdad;
    private javax.swing.JLabel labelFechaNacimiento;
    private javax.swing.JLabel labelGestionarPacientes;
    private javax.swing.JLabel labelGrupoSanguineo;
    private javax.swing.JLabel labelNSS;
    private javax.swing.JLabel labelNacionalidad;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelSexo;
    private javax.swing.JLabel labelTelefono;
    private javax.swing.JTable tablaPacientes;
    private javax.swing.JTextField varCIP;
    private javax.swing.JTextField varDNI;
    private javax.swing.JTextField varDireccion;
    private javax.swing.JTextField varEdad;
    private javax.swing.JTextField varFechaNacimiento;
    private javax.swing.JTextField varGrupoSanguineo;
    private javax.swing.JTextField varNSS;
    private javax.swing.JTextField varNacionalidad;
    private javax.swing.JTextField varNombre;
    private javax.swing.JTextField varSexo;
    private javax.swing.JTextField varTelefono;
    // End of variables declaration//GEN-END:variables

}
